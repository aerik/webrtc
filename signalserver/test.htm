<html>
<head>
<title>test</title>
<script type="text/javascript">
//globals
var dataChannel = null;
var peerConnection = null;

/********* for pasting and sending image ******************/
//http://joelb.me/blog/2011/code-snippet-accessing-clipboard-images-with-javascript/
// We start by checking if the browser supports the 
// Clipboard object. If not, we need to create a 
// contenteditable element that catches all pasted data 
function setUpPaste(){
	if (!window.Clipboard) {
		 var pasteCatcher = document.getElementById("pastehere");
	} 
	// Add the paste event listener
	window.addEventListener("paste", pasteHandler);
}
 window.addEventListener("load", setUpPaste);
/* Handle paste events */
function pasteHandler(e) {
   // We need to check if event.clipboardData is supported (Chrome)
   if (e.clipboardData) {
      // Get the items from the clipboard
      var items = e.clipboardData.items;
      if (items) {
         // Loop through all items, looking for any kind of image
         for (var i = 0; i < items.length; i++) {
            if (items[i].type.indexOf("image") !== -1) {
               // We need to represent the image as a file,
               var blob = items[i].getAsFile();
               // and use a URL or webkitURL (whichever is available to the browser)
               // to create a temporary URL to the object
               var URLObj = window.URL || window.webkitURL;
               var source = URLObj.createObjectURL(blob);
                
               // The URL can then be used as the source of an image
               createImage(source);
            }
         }
      }
   // If we can't handle clipboard data directly (Firefox), 
   // we need to read what was pasted from the contenteditable element
   } else {
      // This is a cheap trick to make sure we read the data
      // AFTER it has been inserted.
      setTimeout(checkInput, 1);
   }
}
 
/* Parse the input in the paste catcher element */
function checkInput() {
	var pasteCatcher = document.getElementById("pastehere")
   // Store the pasted content in a variable
   var child = pasteCatcher.childNodes[0];
 
   // Clear the inner html to make sure we're always
   // getting the latest inserted content
   pasteCatcher.innerHTML = "";
    
   if (child) {
      // If the user pastes an image, the src attribute
      // will represent the image as a base64 encoded string.
      if (child.tagName === "IMG") {
         createImage(child.src);
      }
   }
}
 
/* Creates a new image from a given source */
function createImage(source) {
   var pastedImage = document.getElementById("pastedImage");
   pastedImage.onload = function() {
      // You now have the image!
      document.getElementById("pastehere").innerHTML="PASTE IMAGE HERE";
   }
   pastedImage.src = source;
}
/********** end of paste code ***************/

function sendMessage() {
      var msg = document.getElementById("msg").value;
      document.getElementById("msg").value = null;
      document.getElementById("chat").innerHTML+= "SENT: " + msg + "<br />";
      var obj = {message: msg};
      sendChunkedData(obj);
    return false;
};

function sendImage(){
	var img = document.getElementById("pastedImage");
	var canvas = document.createElement("canvas");
	var width = img.naturalWidth; // this will be 300
	var height = img.naturalHeight; // this will be 400
	canvas.width = width;
	canvas.height = height;
	var ctx = canvas.getContext("2d");
	ctx.drawImage(img, 0, 0, width, height);
	var jpeg = canvas.toDataURL("image/jpeg", 0.5);
	var obj = {image: jpeg};
	sendChunkedData(obj);
}

function sendChunkedData(data){
	var dataStr = data;
	if (!(typeof data === 'string' || data instanceof String)){
		//assume it's an object and stringify it
		dataStr = JSON.stringify(data);
	}
	//remove any existing nulls
	while(dataStr.indexOf('\0') > -1) dataStr = dataStr.replace('\0',"")
	var chunkSize = 16384;
	//wrap in closure?
	var sendChunk = function(offset){
		var chunk = dataStr.substring(offset, offset+chunkSize);
		if(chunk){
			dataChannel.send(chunk);
			setTimeout(function(){sendChunk(offset+chunkSize);},0);
		}else{
			dataChannel.send('\0');
		}
	}
	sendChunk(0);
}
var msgBuf = "";
function handleMsgRecd(data){
	if(data.indexOf('\0') > -1){
		while(data.indexOf('\0') > -1) data=data.replace('\0','');
		var json = (msgBuf + data);
		msgBuf = "";
		var obj = JSON.parse(json);
		if(obj.message){
			document.getElementById("chat").innerHTML+= "RECD: " + obj.message + "<br />";
		}
		if(obj.image){
			var img = document.createElement("img");
			document.body.appendChild(img);
			img.src = obj.image;
		}
	}else{
		msgBuf += data;
	}
}

//create an invitation to connect and post to signalling server
function CreateInvite(){
  //function to run upon receiving a response
  var postRespFunc = function(txt){
    console.log("Posted offer and received " + txt);
    var invite = txt;
    document.getElementById("inviteId").innerHTML = invite;
    //then poll for answer...
    var pollFunc = function(){
      GetRequest("answered?"+invite,function(txt){
        if(txt){
          //assume it's the answer
          handleAnswer(txt);
        }else{
          //poll more
          setTimeout(pollFunc,1000);
        }
      });
    };
    //start polling for answer
    setTimeout(pollFunc,100);
  };
  //function to run after creating the WebRTC offer
  var postFunc = function(offer){
    PostRequest('offer','offer='+encodeURIComponent(offer), postRespFunc);
  }
  //create the offer
  createLocalOffer(postFunc);
}
function AnswerInvite(){
  var invite = document.getElementById("invitation").value;
  //can we create our local description BEFORE we get the remote desc?
  //reduce to one ajax call?
  GetRequest("accept?"+invite,function(txt){
    var answerPostedCallback = function(txt){
      console.log("answerPostedCallback",txt);
    }
    var answerCallback = function(answer){
      PostRequest("answer?"+invite,'answer='+encodeURIComponent(answer), answerPostedCallback);
    }
    handleOffer(txt, answerCallback);
    //then we're waiting for a data channel to be open...
  });
}

function PostRequest(postUrl, reqStr, callback){
  var req=new XMLHttpRequest();
  req.onload = function(){
    var strResp = req.responseText;
    if(callback) callback(strResp);
  }
  //var namevalue=encodeURIComponent(document.getElementById("test").value);
  //var parameters="name="+namevalue;
  req.open("POST", postUrl, true);
  req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  req.send(reqStr);
}
function GetRequest(getUrl, callback){
  var req=new XMLHttpRequest();
  req.onload = function(){
    var strResp = req.responseText;
    if(callback) callback(strResp);
  }
  //var namevalue=encodeURIComponent(document.getElementById("test").value);
  //var parameters="name="+namevalue;
  req.open("GET", getUrl, true);
  req.send();
}

/************ WebRTC stuff ****************/
var RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || 
                       window.webkitRTCPeerConnection || window.msRTCPeerConnection;
var RTCSessionDescription = window.RTCSessionDescription || window.mozRTCSessionDescription ||
                       window.webkitRTCSessionDescription || window.msRTCSessionDescription;

navigator.getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia ||
                       navigator.webkitGetUserMedia || navigator.msGetUserMedia;
//SEE http://olegh.ftp.sh/public-stun.txt                       
var cfg = {"iceServers":[
	{url:'stun:stun1.l.google.com:19302'},
	{url:'stun:stun1.voiceeclipse.net:3478'},
	{url:'stun:stun2.l.google.com:19302'},
	{url:'stun:stun3.l.google.com:19302'},
	{url:'stun:stun4.l.google.com:19302'},
]};

var con = { 'optional': [{'DtlsSrtpKeyAgreement': true}] };

function createPeer(){
  peerConnection = new RTCPeerConnection(cfg,con);

  //used when peerConnection is an answerer
  peerConnection.ondatachannel = function (e) {
      dataChannel = e.channel || e; // Chrome sends event, FF sends raw channel
      initDataChannel();
      console.log("Received datachannel", arguments);
  }

  peerConnection.onsignalingstatechange = onsignalingstatechange;
  peerConnection.oniceconnectionstatechange = oniceconnectionstatechange;
  peerConnection.onicegatheringstatechange = onicegatheringstatechange;
  
  peerConnection.onconnection = function(e){
    console.log("peerConnection connected",e);
  };
}



function initDataChannel(){
  dataChannel.onerror = function (error) {
      console.log("Data Channel Error:", error);
    };

    dataChannel.onmessage = function (event) {
		console.log("Got Data Channel Message:", event.data);
		handleMsgRecd(event.data);
    };

    dataChannel.onopen = function () {
      console.log('data channel open');
      alert("data channel open, ready to connect!");
    };

    dataChannel.onclose = function () {
      console.log("The Data Channel is Closed");
      peerConnection.close();
      alert("Disconnected!");
    };
}

//to initiate a connection
function createLocalOffer(callback) {
  createPeer();
    //create datachannel
    try {
        dataChannel = peerConnection.createDataChannel('test', {reliable:true});
        initDataChannel();
        console.log("Created datachannel (peerConnection)");
    } catch (e) { console.warn("No data channel (peerConnection)", e); }
    //set event handler
    peerConnection.onicecandidate = function (e) {
        console.log("ICE candidate (peerConnection)", e);
        if (e.candidate == null) {
            console.log("ice candidate",peerConnection.localDescription);
            callback(JSON.stringify(peerConnection.localDescription));
        }
    };
    peerConnection.createOffer(function (desc) {
        peerConnection.setLocalDescription(desc);
        console.log("created local offer", desc);
    }, function () {console.warn("Couldn't create offer");});
}


function onsignalingstatechange(state) {
    console.info('signaling state change:', state);
}

function oniceconnectionstatechange(state) {
    console.info('ice connection state change:', state);
    console.info('iceConnectionState: ', peerConnection.iceConnectionState);
    if(peerConnection.iceConnectionState == "failed"){
		alert("Could not connect, sorry");
    }
}

function onicegatheringstatechange(state) {
    console.info('ice gathering state change:', state);
}

//local handles answer from remote
function handleAnswer(answerJson) {
    var obj = JSON.parse(answerJson);
    var answerDesc = new RTCSessionDescription(obj);
    peerConnection.setRemoteDescription(answerDesc);
}

/* functions for remote side */

//handle offer from the initiator
function handleOffer(offerJson, callback) {
    createPeer();
    var obj = JSON.parse(offerJson);
    var offerDesc = new RTCSessionDescription(obj);
    //set event handler
    peerConnection.onicecandidate = function (e) {
        console.log("ICE candidate (peerConnection)", e);
        if (e.candidate == null) {
          console.log("ice candidate",peerConnection.localDescription);
          callback(JSON.stringify(peerConnection.localDescription));
        }
    };
    peerConnection.setRemoteDescription(offerDesc);
    peerConnection.createAnswer(function (answerDesc) {
        console.log("Created local answer: ", answerDesc);
        peerConnection.setLocalDescription(answerDesc);
    }, function () { console.warn("No create answer"); });
}



/***** get ice config from turn server ************/
var req=new XMLHttpRequest();
req.onload = function(){
  var strResp = req.responseText;
  var data = JSON.parse(strResp);
  cfg.iceServers = cfg.iceServers.concat(data.d.iceServers);
  console.log("got config",cfg);
}
req.open("GET","https://service.xirsys.com/ice?ident=aerik&secret=68ed5ab0-a026-11e5-805f-09c3294470e6&domain=dev.vetrocket.net&application=default&room=default&secure=1",true)
req.send();

</script>
</script>
</head>
<body>
<p>test</p>
<p>
<div id="createWrapper">
<h4>create an invitiation</h4>
<button type="button" onclick="CreateInvite();">create invitation</button>
<h3 id="inviteId"></h3>
</div>
<div id="acceptWrapper">
<h4>or accept an inviation</h4>
<input id="invitation" type="text" name="invitation" />
<button type="button" onclick="AnswerInvite()">answer invitation</button>
</div>
<p>Once the data channel is open type your messages below</p>
<input type="text" id="msg" /><button type="button" onclick="sendMessage()">send</button>
<br />
<div id="pastehere" contenteditable="" style="height:50px;width:200px;border:1px solid blue;overflow:hidden;"> PASTE IMAGE HERE</div>
<button type="button" onclick="sendImage()">send image from Url</button>
<div id="chat"></div>
<img id="pastedImage" src=""></div>
<script type="text/javascript">
var code = window.location.search.substr(1);
if(code.length == 5){
	window.addEventListener("load", function(){
		document.getElementById("invitation").value = code;
		AnswerInvite();
	});
}
</script>
</body>
</html>